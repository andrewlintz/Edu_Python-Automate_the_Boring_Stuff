The List Data Type: 

Key Words:
- Lists
- List's values = items
- Comma-delimited = Separated by commas
- Index
- List of Lists
- Negative Indexes
- slice
- Changing a List's Item
- Slice Shortcuts
- del Statement
- String and List Similarities
13 The list() Function
14 The in and not in Operators

1.
Intro

	List is a value that contains values. It contains multiple values in an ordered sequence.  

2.
Items

	The values inside of a list are sometimes called items. Lists begins and ends with square brackets; just like how strings begins & ends with quotes. 

3.
Comma-delimited = Separated by commas
	
	Values within the list are separated with commas. 

	['cat', 'bat', 'rat', 'elephant']

	That's a value that contains 4 values. You can assign it to a variable just like an values.
	
	spam = ['cat', 'bat', 'rat', 'elephant']

4.
Indexes
	
	In order to access an item inside a list, you use an integer index for the position of the item in the list. The index also begins and ends with square brackets. 

	spam[0] evaluates to 'cat'

5.
Lists of lists

	List can also contain other list values. The values of these list of lists can be index with multiple indexes.  
	
	spam = [['cat', 'bat'], [10, 20, 30, 40, 50]]
	spam[0]
	['cat', 'bat']
	spam[0][1]
	'bat'
6. 
Negative Indexes

	While indexes start at 0 and go up, you can also use negative integers for the index in python. These count from the end and count backwards.  
	-1 refers to the last index of a list
	-2 refers to the penultimate index of the list

	spam = ['cat', 'bat', 'rat', 'elephant']
	spam[-1]
	'elephant'
	spam[-2]
	'rat'
	
	We can use lists inside of expressions just like any other value. 
	
	'The ' + spam[-1] + ' is  afraid of the ' + spam[-3] + '.'
	'The elephant is afraid of the bat.'

7.
Slice 

	Just as an index gets a single value from a list, a slice can get several values from a list. Like an index, a slice is typed between square brackets, but it also has two integers separated by a colon for the start and end indexes. 

	spam[1:3]
	['bat', 'rat']

	so the line [1:3] starts at index 1 and goes up to but not including index 3. So these values, ['bat', 'rat'], are returned and are returned as a list themselves. It's a brandnew list created from the previous list. 

8.
Index = Single value
Slice = New List of values

9.
Changing a List's Item

	Remember we can assign a value to a variable if we have that variable on the left side of the assignment operator. 

	spam = 'Hello'
	spam
	'Hello'

	We can do the same thing with indexes and slices. 

	spam = [10, 20, 30]
	spam[1] = 'Hello'
	[10, 'Hello', 30]
	
	Same can be done with multiple values by using a slice. 

	spam[1:3] = ['cat', 'dog', 'mouse']
	spam 
	[10, 'cat', 'dog', 'mouse']

10.
Slice Shortcuts

	As a shortcut you can leave out one or both indexes on either side of the colon of a slice. Leaving out the first index is the same as a 0 at the beginning of a list. And leaving out the second index is the same as using the length of the list, which will slice to the end of the list. 

	spam = ['cat', 'bat', 'rat', 'elephant']
	spam = [:2]
	['cat', 'bat']
	spam = [1:]
	['bat', 'rat', 'elephant']

11.
del Statement

	If you want to delete an item in a list, use a del statement. 

	spam = ['cat', 'bat', 'rat', 'elephant']
	del spam[2]
	spam
	['cat', 'bat', 'elephant']
	del spam[2]
	spam
	['cat', 'bat']

	You can think of the del statement as the Unassignment Statement. 
		del Statement = "unassignment" statement

12.
String and List Similarities

	In the previous lessons we talked about the len function, which returns the # of characters in a string.

			>>>len('Hello')
	evaluates to:	5

	You can also pass len a list to return the number of items in a list.

			>>>len([1,2,3])
	evaluates to: 	3

	And just like how you could do a string concatenation, 
			>>>'Hello ' + 'world'
			'Hello world'
	You can also do list concatenation with the Plus("+") operator. 
			>>>[1,2,3] + [4,5,6]
			[1,2,3,4,5,6]
	And the same applies to string replicatoin. That's where we multiply a string by an integer.
			>>>'Hello' * 3
			HelloHelloHello
	You can do the same thing with list replication:
			>>>[1,2,3] * 3 
			[1,2,3,1,2,3,1,2,3]
	In fact, many of the type of things you can do with strings, Python lets you do with lists. You can think of a string value as list of single characters values. 

13. (10:44)
The list() Function

	In fact, there's a list() function, that returns a list form of the value that you pass it. This is sort of the same thing as when you need to convert a string to an integer with the int() function: 
			>>> int('42')
			42
	or convert an integer to a string with the str() function:
			>>> str(42)
			'42'
	We have the list() function that we can pass a value like 'Hello', and it will return a list of the individual character values coming from the string.
			>>> list('Hello')
			['H', 'e', 'l', 'l', 'o']

14. (11:16)
The in and not in Operators
	
	
RECAP:
-
