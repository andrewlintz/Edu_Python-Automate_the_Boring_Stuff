Lesson 14 for Loops with Lists Multiple Assignment Augmented Assignment Operators : 

Key Words:

2 Range Objects and List-Like Values 
3 Sequences 
4 The list() Function
5 for i in range(len(someList)):
6 Multiple Assignment
7 Swapping Variables
8 Augmented Assignment Operators

1.

	In this Lesson we are going to cover a few different topics: 

		- for Loops with Lists
		- Multiple Assignment
		- Augmented Assignment Operators
	In lesson 7 you learned using for loops to execute a block of code in a certain number of times. 

		>>> for i in range(4):
			print(i)
		0
		1
		2
		3
	This outputs 0,1,2,3. but technically, a for loop repeats the code block once for each value in a list, or a list like value.

2. (0:44)
Range Objects and List-Like Values

	Let's take a closer look at this Range Function

		>>>range(4)
		range(0, 4)

	As you can see, range(4), turns a value into a data type called a "Range Object". And Range Object are a List like values. Python considers, this range object to be similar to the list [0,1,2,3]. In fact you could write a for loop like this:

		>>> for i in [0,1,2,3]
			print(i)
		0
		1
		2
		3
	
	This does the exact same thing as the previous list. So What python is doing is it takes the list value and says, "okay, i'll assign the first item to the variable i, then run the block of code. And then after that, i'll assign the second item in the list to the variable i and run the block of code again, and i'll just keep doing this for all of these in the list.  

	

3. (1:38)
Sequences

	I use the term "list-like" to refer to datatypes that are technically named "sequences" in python. But you don't need to know the technical definitions of these terms. 

4. (1:43)
The list() Function

	Now if you want to get the actual list value from a range object, then you can just pass that to the list()function.

		>>>range(4)
		rang(0, 4)
		>>> list(range(4))
		[0,1,2,3]
	
	It's return an actual list for you. This can also be really handy if you need to get a collection of integers in a list. So, instead of typing out [0, 2, 4, 6, 8 ....100]  you can just pass the range object to the list() Function.

		>>>list(range(0, 100, 2)
		[0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 			36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 			70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98]

	We can assign that to a variable, just like any other variable.

		>>>spam = list(range(0, 100, 2))
		>>>spam
		[0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 			36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 			70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98]

5. (2:34)
for i in range(len(someList)):

	One common python technique, is to use range(len(someList)) value, and then use that inside a for loop. I'll show you an example.  Say we have a variable supplies which contained a list of strings describing typical office equipment.

		>>> supplies = ['pen', 'staplers', 'flame-throwers', 'binders']

	You can have a for loop that instead of going through a range of something, we can pass this range() function the length of the variable "supplies"

		>>> for i in range(len(supplies))):
			
	Now we can use i as an index for the supplies list inside this block of code. so that we can have something like print index for whatever i is in supplies[i]
		
		>>> supplies = ['pen', 'staplers', 'flame-throwers', 'binders']
		>>> for i in range(len(supplies))):
			print('Index ' + str(i) + ' in supplies is: ' + supplies[i]
		Index 0 in supplies is: pens
		Index 1 in supplies is: staplers
		Index 2 in supplies is: flame-throwers
		Index 3 in supplies is: binders
	
	And this prints out "Index 0 in supplies is: pens", " Index 1 in supplies is: staplers"... So using this  "range(len(List)))" format inside a for loop is kind of handy, cuz now we can use this for loop variable "i" to refer to both the index, if we ever need the integer index while we go through the loop, and we can also have the listValue with the [i] to get the value inside the list. So if you ever need to run loop code over a list where you need both the value inside of it and also the integer value index, you can just use this "range(len(List))" on whatever list variable format.  

	And one good thing about this is that the list can be any size what so ever, this same code will work. 

6 (5:29)
Multiple Assignment

	Python also has a Multiple Assignment Trick, it's a nice little short cut. So say we have a list in variable "cat" with strings that describes a cat: 

		>>> cat = ['fat', 'orange', 'loud']
	
	And say we wanted to put all of these items inside of separate variables. We'll have a size variable, a color variable, volume variable. 

		size = cat[0]
		color = cat[1]
		disposition = cat[2]

	We would have to have 3 lines of code for this. And that could get hairy once we have very long lists. 

	But Python has a Multiple Assignment trick.	We could just have multiple variables on the left side of the assignment operators, separated by commas, and the just have a list value.  And this will automatically do the same thing as the three lines of code example above, except in one line of code. 

		>>> size, color, disposition = cate
		>>> size
		'fat'
		>>> color
		'orange'

	So it say's, okay, i'll take the first item in this list "cat" and assign it to the first variable on the left side of the assignment operator, and then the second value inside that list will be assigned to the second variable, and so on. 

	Another thing with the "Multiple Assignment" trick is that you can have multiple variable on the left side, but also multiple values on the right side; just separate the with commas as well. So if you had 'skinny', 'black', '	quite' to describe my cat, I can assign multiple variables to multiple values in one line of code.

		>>> size, color, disposition = 'skinny', 'black', 'quite'

7. (7:08)
Swapping Variables

	This is often used to do swap operations with variable. So we have variable:

		>>> a = 'AAA'
		>>> b = 'BBB'

	Say you want to put the 'AAA' string in the b variable, and mean while take 'BBB' and put it in the a variable, you can do that with the Multiple Assignment trick:

		>>> a, b = b, a
		>>> a
		'BBB'
		>>> b
		'AAA'

	All of a sudden, python will automatically do that swap for us. 

8. (7:42)
Augmented Assignment Operators				

	One more shortcut that python has are the Augmented Assignment Operators. So when assign a value to a variable, you'll frequently use the variable itself. Say you want to increment the value inside a variable:

		>>> spam = 42
		>>> spam = spam + 1

	This is something you do fairly frequently in programming, so python & other languages have something called Augmented Assignment Operators, which is just a little short cut so that you don't have to retype the variable name.

		>>> spam += 1

	This means, take the variable "spam" and just add 1 to it. 

		>>> spam
		44
	You can see that spam was 42, then we added 1 to it, and then we used the Augmented Assignment Operator and added 1 again; making it 44. The code does the exact same thing; it increments it by 1. 

	And there are Augmented Assignment Operators for Plus, Minus, Multiplication, Division, and the modulus operators. You can see them in Table 4-1 The Augmented Assignment Operators

	+=, -+, *=. /=, %=

RECAP:

- For Loops technically iterate over the values in a list
- The range() function returns a list-like value, which can be passed to the list() function if you need an actual list value. 
- Variables can swap their values using multiple assignment. 
- Augmented assignment operators like += rarer used as shortcuts.
