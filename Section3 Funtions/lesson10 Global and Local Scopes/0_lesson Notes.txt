Global and Local Scopes: 

Key Words:
- Global
- Local
- Scope
- Global Variable
- Local Variable
- Assignment Statements vs No Assignment Statements
- Global Statements


1.
Intro
	In Python variables inside a function can have the same name as a variable outside of the function. But they are considered two separate variables. To understand how this works you need to know about Global & Local Scopes. 

	


2.
Global Scope vs Local Scopes


		2_Global_vs_Local_Scope_example.py

	Local Scope: Parameters and variables that are assigned in a Function are said to exist in the that function’s Local scope. 

	Global Scope: Variables assigned outside of all functions are said to exist in the global scope. 

	Scope covers an area of the source code. Any given line in your program is in the global or local scope. Each function has it’s own local scope. Scope is a container of variables. 

3.
Global Variable vs Local Variable
  
	You can also think of Scope as a container of Variables. A variable that exists in the Local Scope, is called a Local Variable. while a variable that exists in the Global Scope, is called a Global Variable. All variables are either one or the other, that is a variable cannot be both local & global variable. 

	Scope is a container of variables. The Global container is created when the program starts, and is destroyed when the program terminates. A local scope is created whenever a Function is Called, and all variable assigned during this call exist with in that local scope. When the function Returns the local scope is destroyed and these variables are forgotten. 

4. 
Pre-amble

	Scopes matter for a couple of reasons: 
		1. Code in the global scope CANNOT use any local variables. 
		2. Code in the local scope CAN access global variables. 
		3. Code in one function’s local scope CANNOT use variables in another function’s local scope.
		4. You CAN use the same name for different variables if they are in different scopes. 

5.
1. Code in the global scope CANNOT use any local variables. 

	Consider this program which will cause an error when you run it: 

	@3:00	5_Global_NOT_use_Local_example.py

6.
4. You CAN use the same name for different variables if they are in different scopes. 

	@4:13	6_Same_Var_Name_Multi_Local_Scope_example.py

7.
2. Code in the local scope CAN access global variables.

	@6:51	7_Local_CAN_access_Global_Var_example.py

8. 

	When you see a variable inside a function, is it a local variable or a global variable that is being read from the local scope.  The way python distinguishes between the two possibilities is that if there is an assignment Statement for a variable anywhere with in that function, it’s considered a local variable. Only if there isn’t an assignment statement that python will check to see if there is a Global variable by that name. 


		Assignment Statement = Local variable
		No Assignment Statement = Global variable. 

	8_Global_vs_Local_variable_example.py

9.
Global Statements

	What if you want to assign a new value to a global variable from inside a function? In order to do so, you have to add a Global Statement to the top of the Function. This tells python even though you have an assignment statement for a variable inside a function, the variable the will always refer to the global variable. Don't create a seperate local variable. 

Why have Scopes at All?

	The benefit that local scope provide is that they separate the functions code from the rest of the program. If something goes wrong b/c some variable has a bad value, there's only a limited area you have to check for this bug. If something going wrong with the global scope b/c of a bad variable, you only have to check the code in the global scope. IF something is going bad inside a function b/c of a variable, you only have to check the function's scope. The code in the global scope, or a different functions local scope, can't directly effect that functions local variables. 

	9_Global_Statements_example.py

10. 
Black Boxes

	Local scopes let you treat functions as black boxes. all that matters is the arguments that you pass into the function when you call it, and the return value that the function call returns. As long as the function's code is working, the rest of your program doesn't have to worry about it's code in variables. 



RECAP

- A Scope can be thought of as an area of the source doce, and as a container of variables.
- The Global Scope is code outside of all functions. Variables assigned here are global variables.
- Each funtion's code is in its own local scope. Variables assigned here are local variables. 
- Code in the global scope cannot use any local variables.
- code in the function's local scope cannot use variables in any another function's local scope. 
- If there's an assignment statement for a variable in a function, that is a local variable.  